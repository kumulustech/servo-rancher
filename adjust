#!/usr/bin/env python3
import sys
import os
import errno
import subprocess
import traceback
import time
import json
import argparse

from client import RancherClient
from client import RancherConfig

class RancherAdjust:
    VERSION="0.1"
    # valid mem units: E, P, T, G, M, K, Ei, Pi, Ti, Gi, Mi, Ki
    # nb: 'm' suffix found after setting 0.7Gi
    MUMAP = {"E":1000**6,  "P":1000**5,  "T":1000**4,  "G":1000**3,  "M":1000**2,  "K":1000, "m":1000**-1,
            "Ei":1024**6, "Pi":1024**5, "Ti":1024**4, "Gi":1024**3, "Mi":1024**2, "Ki":1024}
    def memunits(self, s):
        '''convert a string for memory resource (with optional unit suffix) into a number'''
        for u,m in MUMAP.items():
            if s.endswith(u):
                return ( float(s[:-len(u)]) * m )
        return (float(s))

    # Maps rancher keys to keys which servo understands
    def map_rancher_to_servo(self, dict):
        for service in dict.keys():
            service_settings = dict[service]
            service_settings['cpu'] = service_settings.pop('vcpu', {})
            service_settings['replicas'] = service_settings.pop('count', {})
            if service_settings['replicas'].get('value') is None:
                service_settings['replicas']['value'] = 1
            service_settings['mem'] = service_settings.pop('memoryMb', {})
            if service_settings['mem'].get('value'):
                service_settings['mem']['value'] = int(service_settings['mem']['value']) / 1024**2 # convert to G
            # environment is the same
            dict[service] = service_settings
        return dict

    # Maps servo keys to keys which rancher understands
    def map_servo_to_rancher(self, dict):
        for service in dict.keys():
            service_settings = dict[service]
            service_settings['vcpu'] = service_settings.pop('cpu', None)
            service_settings['count'] = service_settings.pop('replicas', None)
            service_settings['memoryMb'] = service_settings.pop('mem', None)
            if service_settings['memoryMb']:
                service_settings['memoryMb'] = int(service_settings['memoryMb']) * 1024**2 # convert to M
            dict[service] = service_settings
        return dict

    def __init__(self, *args, **kwargs):
        self.config = RancherConfig()
        self.client = RancherClient(self.config)

        self.parser = argparse.ArgumentParser(description='Adjust Rancher Stack Settings')
        self.parser.add_argument('stackname', nargs='?', help='Name of the stack to update. Pass a capability.json file to update that stack.', default=None)
        self.parser.add_argument('--version', help='Print the current version', action='store_true')
        self.parser.add_argument('--info', help='Print version and capabilities in JSON.', action='store_true')
        self.parser.add_argument('--describe', nargs='?', help='Describe actions which can be performed on a stack.', action='append')

        self.args = self.parser.parse_args()

    def describe(self, stack_id):
        try:
            r = self.client.describe(stack_id)
            r = self.map_rancher_to_servo(r)
        except (Exception) as e:
            traceback.print_exc(file=sys.stderr)
            print(json.dumps({"error":e.__class__.__name__, "class":"failure", "message":str(e)}))
            sys.exit(3)

        self.client.print(r)

    def adjust(self, stackname):
        data = json.load(sys.stdin)
        data = self.map_servo_to_rancher(data)
        try:
            self.client.services(name=stackname, action='upgrade', body=data[stackname])
        except Exception as e:
            traceback.print_exc(file=sys.stderr)
            print(json.dumps({"error":e.__class__.__name__, "class":"failure", "message":str(e)}))
            sys.exit(3)

    def run(self):
        if self.args.version:
            print(self.VERSION)
        elif self.args.info:
            print(json.dumps({"version":self.VERSION, "has_cancel":True}))
        elif self.args.describe:
            self.describe(self.args.describe[0])
        elif self.args.stackname:
            self.adjust(self.args.stackname)
        else:
            self.parser.print_help()

if __name__ == "__main__":
    adjuster = RancherAdjust()
    adjuster.run()
